plugins {
    id("fabric-loom") version "0.5-SNAPSHOT"
    id("org.jetbrains.kotlin.jvm") version "1.4.21"
    id("maven-publish")
    id("com.modrinth.minotaur") version "1.1.0"
}

repositories {
    mavenCentral()
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots"
        content {
            includeGroup("me.lucko")
        }
    }

    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup("io.github.cottonmc")
        }
    }

    // uncomment down below if you didn't exclude
//    maven {
//        name = "AperLambda"
//        url = "https://aperlambda.github.io/maven"
//        content {
//            includeModule("org.aperlambda", "lambdajcommon")
//        }
//    }

    maven {
        url = "https://jitpack.io/"
        name = "Jitpack"
        content {
            includeModule("com.github.BoogieMonster1O1", "cartses")
            includeModule("com.github.Chocohead", "Fabric-ASM")
            // uncomment down below if you didn't exclude
//            includeGroup("com.github.lambdaurora")
//            includeGroup("com.github.LambdAurora")
//            includeModule("com.github.jellysquid3", "sodium-fabric")
        }
    }
}

class Globals {
    static def mcVer = "1.16.5"
    static def yarnVer = "3"
    static def loaderVer = "0.11.1"
    static def apiVer = "0.29.4+1.16"
    static def flkVer = "1.4.21+build.1"
    static def modVer = "4.2.1"
    static def mavenGroup = "io.github.ytg1234"
    static def archivesBaseName = "songsounds"

    static def modrinthId = "3KiJfT85"
	static String modrinthChangelog = null
}

archivesBaseName = Globals.archivesBaseName
version = Globals.modVer
group = Globals.mavenGroup

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft("com.mojang:minecraft:${Globals.mcVer}")
    mappings("net.fabricmc:yarn:${Globals.mcVer}+build.${Globals.yarnVer}:v2")
    modImplementation("net.fabricmc:fabric-loader:${Globals.loaderVer}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${Globals.apiVer}")

    modImplementation("net.fabricmc:fabric-language-kotlin:${Globals.flkVer}")

    // Compat
    modCompileOnly("me.lucko:fabric-permissions-api:0.1-SNAPSHOT") // We don't want it at runtime
    modCompileOnly("com.github.BoogieMonster1O1:cartses:52b3402443a59fa5570f60ac534a0268971e13f6") {
        exclude(module: "fabric-api")
        exclude(module: "LambDynamicLights")
    }

    // For anyone wondering, I will use Unweaver (and try to make its custom instruments compatible) when
    // we get to the 1.17 Pre-Release phase
}

processResources {
    inputs.property "version", Globals.modVer

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": Globals.modVer
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Ensure that compiling with newer Java versions still warns/fails when using classes
// or methods only present in versions newer than 8, so we can safely compile with Java 11
// or 15
tasks.withType(JavaCompile).configureEach {
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    } else {
        sourceCompatibility = JavaVersion.toVersion(targetVersion)
        targetCompatibility = JavaVersion.toVersion(targetVersion)
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = "1.8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth(type: TaskModrinthUpload) {
    token = System.getenv("MODRINTH_API_TOKEN") // Token
    // Project Info
    projectId = Globals.modrinthId
    versionNumber = Globals.modVer
    // Files
    uploadFile = remapJar
    addFile file("${project.buildDir}/libs/${project.archivesBaseName}-${Globals.modVer}-dev.jar")
    addFile file("${project.buildDir}/libs/${project.archivesBaseName}-${Globals.modVer}-sources.jar")
    // Metadata
    addGameVersion(Globals.mcVer)
    addLoader("fabric")
    versionName = "[$Globals.mcVer] $Globals.archivesBaseName $Globals.modVer"
	changelog = Globals.modrinthChangelog != null ? Globals.modrinthChangelog : ""

    afterEvaluate {
        tasks.publishModrinth.dependsOn(remapJar)
        tasks.publishModrinth.dependsOn(sourcesJar)
    }
}

jar {
    from "LICENSE"
}

artifacts {
    archives sourcesJar
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact("${project.buildDir.absolutePath}/libs/${Globals.archivesBaseName}-${Globals.modVer}.jar") {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
        if (System.getenv("MAVEN_REPO") != null) {
        	maven {
				url = System.getenv("MAVEN_REPO")
        	}
        }
    }
}
