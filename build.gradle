plugins {
    id("fabric-loom") version "0.5-SNAPSHOT"
    id("org.jetbrains.kotlin.jvm") version "1.4.21"
    id("maven-publish")
    id("com.modrinth.minotaur") version "1.1.0"
}

repositories {
    mavenCentral()
    maven {
        name = "Jitpack"
        url = "https://jitpack.io/"
    }
}

class Globals {
    static def mcVer = "1.16.4"
    static def yarnVer = "7"
    static def loaderVer = "0.10.8"
    static def apiVer = "0.29.1+1.16"
    static def flkVer = "1.4.21+build.1"
    static def modVer = "4.0.1"
    static def mavenGroup = "io.github.ytg1234"
    static def archivesBaseName = "song-sounds"

    static def modrinthId = "3KiJfT85"
	static String modrinthChangelog = null
}

archivesBaseName = Globals.archivesBaseName
version = Globals.modVer
group = Globals.mavenGroup

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${Globals.mcVer}"
    mappings "net.fabricmc:yarn:${Globals.mcVer}+build.${Globals.yarnVer}:v2"
    modImplementation "net.fabricmc:fabric-loader:${Globals.loaderVer}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${Globals.apiVer}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${Globals.flkVer}"

    // For anyone wondering, I will use Unweaver (and try to make its custom instruments compatible) when
    // We get to the 1.17 Pre-Release phase
}

processResources {
    inputs.property "version", Globals.modVer

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": Globals.modVer
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Ensure that compiling with newer Java versions still warns/fails when using classes
// or methods only present in versions newer than 8, so we can safely compile with Java 11
// or 15
tasks.withType(JavaCompile).configureEach {
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    } else {
        sourceCompatibility = JavaVersion.toVersion(targetVersion)
        targetCompatibility = JavaVersion.toVersion(targetVersion)
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = "1.8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishToMR(type: TaskModrinthUpload) {
    token = System.getenv("MODRINTH_API_TOKEN") // Token
    // Project Info
    projectId = Globals.modrinthId
    versionNumber = Globals.modVer
    // Files
    uploadFile = remapJar
    addFile file("${project.buildDir}/libs/${project.archivesBaseName}-${Globals.modVer}-dev.jar")
    addFile file("${project.buildDir}/libs/${project.archivesBaseName}-${Globals.modVer}-sources.jar")
    // Metadata
    addGameVersion(Globals.mcVer)
    addLoader("fabric")
    versionName = "[$Globals.mcVer] $Globals.archivesBaseName $Globals.modVer"
	changelog = Globals.modrinthChangelog != null && Globals.modrinthChangelog != "" ? Globals.modrinthChangelog : ""

    afterEvaluate {
        tasks.publishToMR.dependsOn(remapJar)
        tasks.publishToMR.dependsOn(sourcesJar)
    }
}

jar {
    from "LICENSE"
}

artifacts {
    archives sourcesJar
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${Globals.modVer}.jar") {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
        maven {
			url = System.getenv("MAVEN_REPO")
        }
    }
}
